<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.luka.r18.mappers.AnimeCollectMapper">

    <resultMap type="com.luka.r18.entity.AnimeCollectEntity" id="AnimeCollectMap">
        <result property="id" column="id" jdbcType="INTEGER"/>
        <result property="uuid" column="uuid" jdbcType="VARCHAR"/>
        <result property="userUuid" column="user_uuid" jdbcType="VARCHAR"/>
        <result property="viewUuid" column="view_uuid" jdbcType="VARCHAR"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <resultMap type="com.luka.r18.entity.response_object.AnimeCollectView" id="AnimeCollectViewMap">
        <result property="uuid" column="uuid" jdbcType="VARCHAR"/>
        <result property="userUuid" column="user_uuid" jdbcType="VARCHAR"/>
        <result property="viewUuid" column="view_uuid" jdbcType="VARCHAR"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        <association property="animeViewData" javaType="com.luka.r18.entity.response_object.AnimeView">
            <result property="uuid" column="anime_view_uuid" jdbcType="VARCHAR"/>
            <result property="pathUuid" column="path_uuid" jdbcType="VARCHAR"/>
            <result property="title" column="file_name" jdbcType="VARCHAR"/>
            <result property="info" column="info" jdbcType="VARCHAR"/>
            <result property="clicks" column="clicks" jdbcType="INTEGER"/>
            <result property="createTime" column="anime_view_create_time" jdbcType="TIMESTAMP"/>
            <collection property="fileList" ofType="ArrayList" select="queryFileByUuid" column="path_uuid"/>
        </association>
    </resultMap>

    <resultMap id="AnimeFileMap" type="com.luka.r18.entity.response_object.FileListData">
        <result property="fileType" column="type" jdbcType="VARCHAR"/>
        <result property="fileUuid" column="uuid" jdbcType="VARCHAR"/>
        <result property="fileName" column="file_name" jdbcType="VARCHAR"/>
        <result property="fileSize" column="file_size" jdbcType="VARCHAR"/>
        <result property="lastEditTime" column="last_edit_time" jdbcType="TIMESTAMP"/>
    </resultMap>


    <!--查询单个-->
    <select id="queryById" resultMap="AnimeCollectMap">
        select
          uuid, user_uuid, view_uuid, create_time
        from anime_collect
        where id = #{id}
    </select>

    <!--查找文件-子查询-->
    <select id="queryFileByUuid" resultMap="AnimeFileMap">
        select anime_file.type,
               anime_file.uuid,
               anime_file.file_name,
               anime_file.file_size,
               anime_file.last_edit_time
        from anime_file
                 left join anime_info_link
                           on anime_file.uuid = anime_info_link.video_uuid
        where parent_folder = #{path_uuid};
    </select>

    <!--查询指定行数据-->
    <select id="queryAllByLimit" resultMap="AnimeCollectViewMap">
        select
        anime_collect.uuid,
        anime_collect.user_uuid,
        anime_collect.view_uuid,
        anime_collect.create_time,

        anime_view.uuid as anime_view_uuid,
        anime_view.path_uuid,
        anime_view.info,
        anime_view.clicks,
        anime_view.create_time as anime_view_create_time,

        anime_file.file_name

        from anime_collect
        left join anime_view on anime_collect.view_uuid = anime_view.uuid
        left join anime_file on anime_view.path_uuid = anime_file.uuid

        <where>
            <if test="animeCollect.id != null">
                and id = #{animeCollect.id}
            </if>
            <if test="animeCollect.uuid != null and animeCollect.uuid != ''">
                and uuid = #{animeCollect.uuid}
            </if>
            <if test="animeCollect.userUuid != null and animeCollect.userUuid != ''">
                and user_uuid = #{animeCollect.userUuid}
            </if>
            <if test="animeCollect.viewUuid != null and animeCollect.viewUuid != ''">
                and view_uuid = #{animeCollect.viewUuid}
            </if>
            <if test="animeCollect.createTime != null">
                and create_time = #{animeCollect.createTime}
            </if>
        </where>
        limit #{pageable.offset}, #{pageable.pageSize}
    </select>

    <!--统计总行数-->
    <select id="count" resultType="java.lang.Long">
        select count(1)
        from anime_collect
        <where>
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="uuid != null and uuid != ''">
                and uuid = #{uuid}
            </if>
            <if test="userUuid != null and userUuid != ''">
                and user_uuid = #{userUuid}
            </if>
            <if test="viewUuid != null and viewUuid != ''">
                and view_uuid = #{viewUuid}
            </if>
            <if test="createTime != null">
                and create_time = #{createTime}
            </if>
        </where>
    </select>

    <!--统计总行数-->
    <select id="selectByEntity" resultMap="AnimeCollectMap">
        select * from anime_collect
        <where>
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="uuid != null and uuid != ''">
                and uuid = #{uuid}
            </if>
            <if test="userUuid != null and userUuid != ''">
                and user_uuid = #{userUuid}
            </if>
            <if test="viewUuid != null and viewUuid != ''">
                and view_uuid = #{viewUuid}
            </if>
            <if test="createTime != null">
                and create_time = #{createTime}
            </if>
        </where>
    </select>

    <!--新增所有列-->
    <insert id="insert" keyProperty="id" useGeneratedKeys="true">
        insert into anime_collect(uuid, user_uuid, view_uuid, create_time)
        values (#{uuid}, #{userUuid}, #{viewUuid}, #{createTime})
    </insert>

    <insert id="insertBatch" keyProperty="id" useGeneratedKeys="true">
        insert into anime_collect(uuid, user_uuid, view_uuid, create_time)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.uuid}, #{entity.userUuid}, #{entity.viewUuid}, #{entity.createTime})
        </foreach>
    </insert>

    <insert id="insertOrUpdateBatch" keyProperty="id" useGeneratedKeys="true">
        insert into anime_collect(uuid, user_uuid, view_uuid, create_time)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.uuid}, #{entity.userUuid}, #{entity.viewUuid}, #{entity.createTime})
        </foreach>
        on duplicate key update
        uuid = values(uuid),
        user_uuid = values(user_uuid),
        view_uuid = values(view_uuid),
        create_time = values(create_time)
    </insert>

    <!--通过主键修改数据-->
    <update id="update">
        update anime_collect
        <set>
            <if test="uuid != null and uuid != ''">
                uuid = #{uuid},
            </if>
            <if test="userUuid != null and userUuid != ''">
                user_uuid = #{userUuid},
            </if>
            <if test="viewUuid != null and viewUuid != ''">
                view_uuid = #{viewUuid},
            </if>
            <if test="createTime != null">
                create_time = #{createTime},
            </if>
        </set>
        where id = #{id}
    </update>

    <!--通过主键删除-->
    <delete id="deleteById">
        delete from anime_collect where id = #{id}
    </delete>

    <!--通过主键删除-->
    <delete id="delete">
        delete from anime_collect
        <where>
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="uuid != null and uuid != ''">
                and uuid = #{uuid}
            </if>
            <if test="userUuid != null and userUuid != ''">
                and user_uuid = #{userUuid}
            </if>
            <if test="viewUuid != null and viewUuid != ''">
                and view_uuid = #{viewUuid}
            </if>
            <if test="createTime != null">
                and create_time = #{createTime}
            </if>
        </where>
    </delete>

</mapper>

